#!/usr/bin/env groovy

// An example of a declarative syntax pipeline for running a maven build

pipeline {
    // Agent to start on (can be changed later in the pipeline
    agent { label 'master' }

    // Define tools to be used in this pipeline
    tools {
        // The M3 maven tool must be already configured in
        // Manage Jenkins -> Global Tool Configuration -> Maven
        maven 'M3'
    }

    // Global options for configuration applied to the whole job
    options {
        // Keep only 10 last build
        buildDiscarder(logRotator(numToKeepStr:'10'))

        // Timeout after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }

    // Main build steps
    stages {
        stage('Clone sources') {
            steps {
                git 'https://github.com/JFrogDev/project-examples'
            }
        }
        stage('Maven build') {
            steps {
                sh 'cd maven-example; mvn -Dmaven.test.failure.ignore clean package'
            }
        }
        stage('Test report') {
            steps {
                junit 'maven-example/**/target/surefire-reports/TEST-*.xml'
            }
        }
        stage('Archive') {
            steps {
                archive 'maven-example/**/target/*.war'
            }
        }
        // Different kinds of tests are executed in parallel
        stage('Tests') {
            steps {
                parallel (
                    "Sanity Tests" : {
                        build(
                            job: "01-sanity-tests",
                            parameters:[
                                string (name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
                            ]
                        )
                    },
                    "API Tests" : {
                        build(
                            job: "02-api-tests",
                            parameters:[
                                string (name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
                            ]
                        )
                    },
                    "UI Tests" : {
                        build(
                            job: "03-ui-tests",
                            parameters:[
                                string (name: 'RELEASE_VERSION', value: "${params.RELEASE_VERSION}"),
                            ]
                        )
                    }
                )
            }
        }
        // Build can be promoted to a release 
        stage('Promotion') {
            steps {
                build(
                    job: "05-conditional-release",
                    parameters:[
                        string (name: 'CUSTOM_TEXT', value: 'From parallel builds job'),
                        string (name: 'VERSION', value: "${params.RELEASE_VERSION}"),
                        booleanParam (name: 'DEBUG_BUILD', value: false),
                        booleanParam (name: 'RELEASE', value: true),
                    ]
                )
            }
        }
        // New version is deployed to different servers
        stage('Deploy') {
            steps {
                parallel (
                    "Deployment: Primary" : {
                        echo "Deployed version ${params.RELEASE_VERSION} to Canary Servers"
                    },
                    "Deployment: Secondary" : {
                        echo "Deployed version ${params.RELEASE_VERSION} to ${params.DEPLOY_TO} Servers"
                    }
                )
            }
        }
        stage('Finish') {
            steps {
                echo "Build finished"
            }
        }
    }
    // Post build actions
    post {
        always {
            echo "Always cleanup..."
        }

        success {
            echo "Good build. Send email..."
        }

        failure {
            echo "Failed build. Send email..."
        }
    }
}
